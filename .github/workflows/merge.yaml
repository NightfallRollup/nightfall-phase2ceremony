# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions
#name: 'Terraform on Merge'
#
#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  unit:
#    name: 'Run unit test'
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Run unit tests
#        run: |
#          cd serve
#          npm i
#          AUTH_KEY=${{ secrets.AUTH_KEY }} npm run test
#
#  terraform:
#    name: 'Run Terraform on Merge'
#    runs-on: ubuntu-latest
#    env:
#      TERRAFORM_CLOUD_TOKENS: app.terraform.io=${{ secrets.TF_API_TOKEN }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Create branch workspace
#        uses: dflook/terraform-new-workspace@v1
#        with:
#          workspace: mpc
#          path: terraform
#
#      - name: Deploy infrastrucutre
#        uses: dflook/terraform-apply@v1
#        id: test-infra
#        with:
#          path: terraform
#          variables: |
#            BRANCH = "main"
#            COMMITHASH = "${{ github.sha }}"
#            AUTH_KEY = "${{ secrets.AUTH_KEY }}"
#          workspace: mpc
#          auto_approve: true
#
#      - name: Download phase1 ptau
#        run:
#          wget https://hermez.s3-eu-west-1.amazonaws.com/powersOfTau28_hez_final_16.ptau -O
#          circuits/phase1.ptau
#
#      - name: Set up S3cmd cli tool
#        uses: s3-actions/s3cmd@v1.2.0
#        with:
#          provider: aws # default is linode
#          region: 'eu-west-2'
#          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#      - name: Install dependencies
#        run: |
#          npm i
#          npm i -g snarkjs@latest
#
#      - name: Install cargo, circom and compile circuits
#        run: |
#          curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh -s -- -y
#          source "$HOME/.cargo/env"
#          git clone https://github.com/iden3/circom.git
#          cd circom
#          cargo build --release
#          cargo install --path circom
#          cd ..
#
#          for f in ./circuits/*.circom
#          do 
#            circom --r1cs $f -o ./circuits
#            snarkjs groth16 setup ${f%.circom}.r1cs circuits/phase1.ptau ${f%.circom}_0000.zkey
#            BASENAME=$(basename $f .circom)
#            FOLDERNAME=${BASENAME%.*}
#            s3cmd sync circuits/${BASENAME}_0000.zkey s3://mpc-main/$FOLDERNAME/${BASENAME}_0000.zkey
#          done
#
#  browser:
#    strategy:
#      matrix:
#        node-version: [16.x]
#    needs: terraform
#    runs-on: ubuntu-latest
#    name: Build and deploy browser
#    env:
#      TERRAFORM_CLOUD_TOKENS: app.terraform.io=${{ secrets.TF_API_TOKEN }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Use Node.js ${{ matrix.node-version }}
#        uses: actions/setup-node@v2
#        with:
#          node-version: ${{ matrix.node-version }}
#          cache: 'npm'
#          cache-dependency-path: browser/package-lock.json
#      - run: npm ci
#        working-directory: browser
#      - run: |
#          npm i browserify
#      - run: |
#          npm run build
#        env:
#          REACT_APP_BRANCH: main
#        working-directory: browser
#
#      - name: Set up S3cmd cli tool
#        uses: s3-actions/s3cmd@v1.2.0
#        with:
#          provider: aws # default is linode
#          region: 'eu-west-2'
#          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#      - name: Copy browser build
#        run: |
#          s3cmd sync --no-mime-magic --guess-mime-type build/* s3://mpc-main/website/
#        working-directory: browser
#
#      - name: Get outputs
#        uses: dflook/terraform-output@v1
#        id: tf-outputs
#        with:
#          path: terraform
#          workspace: mpc
#
#      - name: Invalidate CloudFront
#        uses: chetan/invalidate-cloudfront-action@v2
#        env:
#          DISTRIBUTION: ${{ steps.tf-outputs.outputs.distribution_id }}
#          PATHS: '/*'
#          AWS_REGION: 'eu-west-3'
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# 